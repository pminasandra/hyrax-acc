# Pranav Minasandra
# pminasandra.github.io
# Nov 28, 2023
# Yay, happy birthday to me!
# Ported to Hyrax Project from meerkat-acc on Mar 08, 2025

"""
Reads the HUGE csv files containing acc info.
"""

import glob
import os.path

import numpy as np
import pandas as pd

import config
import utilities

dtypes_dict_raw = {
    'Tag ID': str,
    'Timestamp': str,
    'X': np.float64,
    'Y': np.float64,
    'Z': np.float64,
    'Batt. V. (V)': str,
    'Metadata': str
}

if not config.SUPPRESS_INFORMATIVE_PRINT:
    old_print = print
    print = utilities.sprint

def validate_acc_file(df, subset_cols=True):
    """
    Checks column labels and behavioral states in a given dataframe
    """
    if subset_cols:
        assert list(df.columns) == ["Timestamp", "X", "Y", "Z"] #labels as generated by tag

def load_acc_file(datafilepath, subset_cols=True):
    """
    Loads and validates given acc filepath.
    Args:
        datafilepath (str)
        subset_cols: whether to subset to specific cols
    Yields:
        2-tuple: datafile (pd.DataFrame)
    Raises:
        AssertionError: if there are inappropriate datafiles
    """
    if not datafilepath.endswith("csv") and not datafilepath.endswith("parquet"):
        raise NotImplementedError("No idea how to deal with file "+os.path.basename(datafilepath))
    if subset_cols:
        if datafilepath.endswith(".csv"):
            datafile = pd.read_csv(datafilepath,
                                    usecols=["Timestamp", "X", "Y", "Z"],
                                    sep=config.ACC_FILE_SEP)
        elif datafilepath.endswith(".parquet"):
            datafile = pd.read_parquet(datafilepath,
                                    columns=["Timestamp", "X", "Y", "Z"])
    else:
        try:
            if datafilepath.endswith(".csv"):
                datafile = pd.read_csv(datafilepath, 
                                        dtype=dtypes_dict_raw,
                                        sep=config.ACC_FILE_SEP)
            elif datafilepath.endswith(".parquet"):
                datafile = pd.read_parquet(datafilepath,
                                        columns=dtypes_dict_raw)

        except Exception as e:
            print("dtype didn't work, trying again:", e)
            datafile = pd.read_csv(datafilepath)
    datafile['Timestamp'] = pd.to_datetime(datafile['Timestamp'],
                                format='%Y/%m/%d %H:%M:%S.%f')
    validate_acc_file(datafile, subset_cols=subset_cols)
    datafile["Timestamp"] += pd.to_timedelta(config.ACC_GPS_OFFSET, unit='s')
    # No correction of timezone required, already in UTC?

    return datafile

def load_acc_files(subset_cols=True, ftype='parquet'):
    """
    GENERATOR!!
    Loads and validates dataframes from audit csvs.
    Args:
        subset_cols: whether to subset to specific cols
        ftype (str): 'csv' or 'parquet'
    Yields:
        2-tuple: accname (str), and datafile (pd.DataFrame)
    Raises:
        AssertionError: if there are inappropriate datafiles
    """
    tgtpath = os.path.join(config.ACC_DIR)
    for datafilepath in glob.glob(os.path.join(tgtpath, f"*.{ftype}")):
        datafile = load_acc_file(datafilepath, subset_cols=subset_cols)
        yield os.path.basename(datafilepath)[:-len(f".{ftype}")], datafile


if __name__ == "__main__":
    accgen = load_acc_files()
    for name, df in accgen:
        print("\n", name, "\n", df)
